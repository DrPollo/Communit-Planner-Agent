const Actions = require('../Actions/');
const Conditions = require('../Conditions/');
const {time:Time,rate:Rate} = require('../Utils');
const STATES = require('./states');
const SKILLS = require('./skills');
const ROLES = require('./roles');

// todo init agents from users, registers agents in users status

// todo each agent is initialised with:
// todo 1) the community clock
// todo 2) condition generator
// todo 3) status generator
// todo 4) event generator
// todo 5) action generator

// todo agent has internal phases defined bu

// todo agents are setTimeout functions working on the community clock

// todo state machine active, self-sufficient, dependent, death
// list of actions he can perform
// preferences
// in training
// use emerging events as a malus for the next round of actions


// going out of the area > bring modifiers

// the delta of outcomes > create new conditions? or trigger emergency?

// pipeline of interventions to be done, eventually the next day?

// degree of relations between agents


class Agent{
    // input the state of the agent
    // {age, conditions, state, role, skills}
    // otherwise it is generated by the class
    constructor(agent,clock = new Time.Clock('day')){

        this.clock = clock;

        // init with the agent information
        let {age = 0, conditions = [], role, state, skills} = agent;
        // init year of birth
        this.yearOfBirth = this.clock.yearOfBirth(age);
        // console.log('year of birth',this.yearOfBirth);



        // init role
        this.role = this._initRole(role);
        // console.log('agent role',this.role);
        //init skills (provided or randomly generated
        this.skillsMap = this._initSkills(skills);
        // console.log('agent skills',this.skillsMap);



        // console.log('role ',this.role);
        // init state
        this.status = Rate.pickOne(STATES);
        // console.log('current status ',this.status);

        // init helpers
        this.actionsHelper = new Actions(this.yearOfBirth,this.clock);
        // init conditions helper
        this.conditionsHelper = new Conditions({age,conditions},this.clock);


    }
    get age(){
        return this.clock.age(this.yearOfBirth);
    }
    // returns an array with the current conditions of the agent
    get conditions(){
        return Array.from(this.conditionsHelper.status);
    }
    get skills(){
        return Array.from(this.skillsMap.values());
    }


    //
    dailyRoutine(events = []){
        // todo evaluate impact of events

        // todo get reminders of daily activities
        let dailies = this.actionsHelper.remind(this.conditions);
        // todo decide what to do
        // todo decide what to skip
        let choices = {actions:[], skips:[]};


        // IMPORTANT TODO it can be done in bulk or cycle (for the sake of logs)
        // evaluate outcomes of actions
        let {positive,negative,time} = this.actionsHelper.outcomes(choices.actions,choices.skips,this.conditionsHelper.list);


        // IMPORTANT TODO AS BULK //
        // translate outcomes to conditions
        let issues = this.conditionsHelper.assess(positive,negative);

        // todo logs the day
        let day = {
            activities: {
                actions: choices.actions,
                skips: choices.skips,
                time,
                outcomes:{positive,negative}
            },
            state:{
                conditions: this.conditions,
                issues
            }
        };
        this._log(day);
        return day;
    }

    _initRole(role){
        let agentRole;
        if(role){
            let roles = ROLES.filter(entry => (entry===role) );
            if(roles.length >= 0){
                agentRole = roles[0];
            }
        }
        if(!agentRole){
            agentRole = Rate.pickOne(ROLES);
        }
        return agentRole;
    }

    _initSkills(skills){
        // init skills
        let skillSet;
        if(skills && Array.isArray(skills)){
            let agentSkills = new Set(skills);
            // generate new conditions
            skillSet = this.SKILLS.filter(skill=>{
                return (agentSkills.has(skill.label));
            });
        }
        if(!skillSet){
            // random init
            skillSet = SKILLS.filter(s=>Rate.test(s.rate));
        }
        return skillSet.reduce((s,e)=>{
            s.set(e.label,e);
            return s;
        },new Map());
    }


    // todo log service
    _log(entry){
        console.log(entry);
        // todo save in the log key: value store
        // agent: date:
    }
};

module.exports =  Agent;






// todo test
let agentInit = {age:55};
let agent = new Agent(agentInit);


// console.log(`Agent:`,agent);
// console.log(`Now:`,clock.now.get('year'));
console.log(`Agent's age: ${agent.age}`);
console.log(`Agent's role: ${agent.role.label}`);
console.log(`Agent's skills: ${agent.skills.map(e=>e.label)}`);
// console.log(`Agent's conditions:`, agent.conditions);
agent.dailyRoutine();


